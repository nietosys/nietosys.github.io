#!/bin/bash

# Definici√≥n de colores para mejorar la presentaci√≥n en la terminal
green="\e[32m"   # Color verde para t√≠tulos
blue="\e[34m"    # Color azul para comandos
yellow="\e[33m"  # Color amarillo para explicaciones
red="\e[31m"     # Color rojo para errores
reset="\e[0m"    # Reset para restablecer el color predeterminado

#clear  # Limpia la pantalla antes de iniciar

echo "${blue}\nüíª Bienvenido al Asistente Avanzado de Git üöÄ${reset}"
echo  "Este script te guiar√° paso a paso en el uso de Git."

# ==========================
# Sintaxis de while en Bash:
# while [ condici√≥n ]; do
#     comandos
# done
# Este bucle se ejecuta hasta que la condici√≥n deje de ser verdadera.
# En este caso, el bucle es infinito porque no tiene condici√≥n de salida expl√≠cita.
# ==========================

while true; do
    echo "\n${yellow}Selecciona una opci√≥n:${reset}"
    echo "1. Inicializar un repositorio (git init)"
    echo "2. Ver el estado del repositorio (git status)"
    echo "3. Agregar archivos al √°rea de staging (git add)"
    echo "4. Hacer un commit (git commit)"
    echo "5. Ver historial de cambios (git log)"
    echo "6. Crear y cambiar de rama (git branch / git switch)"
    echo "7. Fusionar ramas (git merge)"
    echo "8. Subir cambios a un repositorio remoto (git push)"
    echo "9. Descargar cambios remotos (git pull)"
    echo "10. Salir"
    read -rp "üëâ Ingresa el n√∫mero de la opci√≥n: " opcion  # Captura la entrada del usuario

    # ==========================
    # Sintaxis de case en Bash:
    # case variable in
    #     patr√≥n1) comandos ;;
    #     patr√≥n2) comandos ;;
    #     *) comandos ;;  # Captura cualquier otro caso no definido
    # esac
    #
    # El doble `;;` se usa para separar cada bloque dentro del case.
    # ==========================
    
    case $opcion in
        1)
            echo "\n${green}Inicializando un nuevo repositorio...${reset}"
            echo "\n${yellow}Este comando crea un nuevo repositorio Git en el directorio actual.${reset}"
            echo "\n${blue}Comando: git init${reset}"
            git init
            ;;
        2)
            echo "\n${green}Verificando el estado del repositorio...${reset}"
            echo "\n${yellow}Este comando muestra los cambios en el repositorio, incluyendo archivos modificados y sin seguimiento.${reset}"
            echo "\n${blue}Comando: git status${reset}"
            git status
            ;;
        3)
            echo "\n${green}Agregando archivos al √°rea de staging...${reset}"
            echo "\n${yellow}Este comando a√±ade archivos al √°rea de staging para prepararlos antes de hacer un commit.${reset}"
            echo "\n${blue}Comando: git add <archivo>${reset}"
            read -rp "Ingresa el archivo o usa '.' para todos: " archivo
            git add "$archivo"
            ;;
        4)
            echo "\n${green}Haciendo un commit...${reset}"
            echo "\n${yellow}Este comando guarda los cambios en el historial del repositorio con un mensaje descriptivo.${reset}"
            echo "\n${blue}Comando: git commit -m \"mensaje\"${reset}"
            read -rp "Escribe un mensaje para el commit: " mensaje
            git commit -m "$mensaje"
            ;;
        5)
            echo "\n${green}Mostrando historial de commits...${reset}"
            echo "\n${yellow}Este comando muestra el historial de commits en el repositorio.${reset}"
            echo "\n${blue}Comando: git log --oneline --graph --decorate${reset}"
            git log --oneline --graph --decorate
            ;;
        6)
            echo "\n${green}Gestionando ramas...${reset}"
            echo "\n${yellow}Este comando permite ver, crear o cambiar entre ramas en Git.${reset}"
            echo "\n${blue}Comando: git branch / git switch -c <nombre_rama>${reset}"
            read -rp "Ingresa el nombre de la nueva rama o deja en blanco para ver las existentes: " rama
            if [ -z "$rama" ]; then
                git branch
            else
                git switch -c "$rama"
            fi
            ;;
        7)
            echo "\n${green}Fusionando ramas...${reset}"
            echo "\n${yellow}Este comando combina cambios de una rama con la rama actual.${reset}"
            echo "\n${blue}Comando: git merge <nombre_rama>${reset}"
            read -rp "Ingresa la rama a fusionar en la actual: " rama
            git merge "$rama"
            ;;
        8)
            echo "\n${green}Subiendo cambios al repositorio remoto...${reset}"
            echo "\n${yellow}Este comando sube los commits locales a un repositorio remoto.${reset}"
            echo "\n${blue}Comando: git push origin main${reset}"
            git push origin main
            ;;
        9)
            echo "\n${green}Descargando cambios remotos...${reset}"
            echo "\n${yellow}Este comando obtiene y fusiona cambios del repositorio remoto.${reset}"
            echo "\n${blue}Comando: git pull origin main${reset}"
            git pull origin main
            ;;
        10)
            echo "\n${red}Saliendo del asistente de Git...${reset}"
            break  # Rompe el bucle y termina el script
            ;;
        *)
            echo "\n${red}‚ùå Opci√≥n no v√°lida, intenta de nuevo.${reset}"
            ;;
    esac
    
    echo "\nPresiona Enter para continuar..."
    read input
    
    # ==========================
    # Explicaci√≥n de `if [ -z "$input" ]; then`
    #
    # `-z` verifica si la variable est√° vac√≠a. Si el usuario solo presiona Enter,
    # la variable `$input` estar√° vac√≠a y se ejecutar√° `clear` para limpiar la pantalla.
    #
    # `if [ condici√≥n ]; then` es la sintaxis b√°sica de un condicional en Bash.
    #
    # Diferencia entre `[ ... ]` y `[[ ... ]]`:
    # - `[ ... ]` es la sintaxis POSIX tradicional.
    # - `[[ ... ]]` es una extensi√≥n de Bash que permite operadores avanzados
    #   como `&&`, `||` y expresiones regulares.
    # =========================
cat << EOF
    if [ -z "$input" ]; then  # Comprueba si el usuario solo presion√≥ Enter
        clear
    fi
EOF
done
